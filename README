Overview:
What problem is this codebase trying to solve?
This code base is abstracting an XML to an instance of schedules using a central system for
database like maintenance. Then being able to go from the implementation in the system to writing
a XML file and saving it to a given file location/directory.
What high-level assumptions are made in the codebase, either about the background knowledge needed,
about what forms of extensibility are envisioned or are out of scope, or about prerequisites for
using this code?
The model is very high-level from an interaction stand point without a controller.
Extensibility would come from the interface implementation of how a schedule is represented
along with how a system can be represented.
--------------------------------------------------------------------------------------------------
Quick start: give a short snippet of code showing how a user might get started using this codebase.

--------------------------------------------------------------------------------------------------
Key components: Explain the highest-level components in your system, and what they do.
It is trite and useless to merely say “The model represents the data in my system.
The view represents the rendering of my system. ...”
This is a waste of your time and the reader’s time.
Describe which components “drive” the control-flow of your system, and which ones “are driven”.
The central system is driven by the XML reader and taking in new schedules to the overall system.

--------------------------------------------------------------------------------------------------
Key subcomponents: Within each component, give an overview of the main nouns in your system,
and why they exist and what they are used for.

view package:
    NUPlannerView
        Considering previous assignment implementations we would want an interface to implement
        render, which abstracts how a model is viewed/displayed (text, graphics, etc.)
    NUPlannerTextView
        // PARAMETERIZED MODEL AND VIEW FOR SCHEDULE???????
        toString to be used as a textual aid for correctness with assignment 5
        viewing the schedule as a user's name then listing the day and each event a user has
        for each respective day of the week.
model package:
    eventfields package:
        Day
            An enumeration to represent days of the week, restricting the user to only valid days.
        Location
            Considers the locations children making sure there is a boolean and string location.
        Time
            Enforcing military time with hours and minutes, no seconds and not in civilian time.

    Central System
        Implements the NUPlanner system with its public methods and keeps track of all users,
        and all users schedules in the current system. Has a set of all users contained in the
        system. A list of events in the system.
        - Invariant: all events in the event list are in at least one user's schedule
    EventRep
        The interface to represent how an event could be implemented with the implemented public
        methods.
    Event
        An event in a user's schedule. Has a name of the event, time, location, and list of
        those invited and enforces the requirements listed by the assignment. Names for all
        existing events in a given user's schedule should be unique.
        - Invariant: there is always a host for an event (at least one invitee per event)
    NUPlannerSystem
        The interface to represent a systems behavior of add, modify, remove, and get all users
        schedules.
    ScheduleRep
        The interface to represent how a schedule could be implemented with the public methods
        mentioned with their respective javadocs.
    Schedule
        A schedule of a user. This contains the users name and the events in their schedule. All
        user ids should be unique (two with the same name are not allowed).
userxmls:
    A package to be used when testing the xml for a place the writer can send the XML files to.
Changes for part 2 ------------------------------------------------------------------------------
    Added in a ReadonlyPlannerModel which contains the following observations:
        What users (or user names) are in the planner?
            This was missing so we added it into our central system by getting the keys of our
            map that stores all of our users and schedules.
        Does some event conflict with the existing schedules for all of the event’s invited users?
            This was missing so we added a overlaps with method in our schedule class and added a
            method called doesOverlap which takes in an event, gets all who are invited. Iterates
            through the invitiees schedules and then called the new overlapsWith method on the
            given event.
        What are the events in a given user’s schedule?
            We had half of this implementation, but added this method to the ReadOnly and got the
            users schedule, and the events planned as a list of events. Which is NOT A REFRENCE TO
            the actual field in schedule, rather it is a copy of all the events.



--------------------------------------------------------------------------------------------------
Source organization: Either explain for each component where to find it in your codebase,
or explain for each directory in your codebase what components it provides.
Either way, supply the reader with a “map” to your codebase, so they can navigate around.

