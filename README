Overview-------------------------------------------------------------------------------------------
What problem is this codebase trying to solve?

This code base is abstracting an XML to an instance of schedules using a central system for
database like maintenance. Then being able to go from the implementation in the system to writing
a XML file and saving it to a given file location/directory.
---------------------------------------------------------------------------------------------------
What high-level assumptions are made in the codebase, either about the background knowledge needed,
about what forms of extensibility are envisioned or are out of scope, or about prerequisites for
using this code?

The model is very high-level from an interaction stand point without a controller.
Extensibility would come from the interface implementation of how a schedule is represented
along with how a system can be represented.
--------------------------------------------------------------------------------------------------
Quick start: give a short snippet of code showing how a user might get started using this codebase.

When running the system a user should open up out PlannerMain which... runs the planner!
To add in some events to the schedule/nuplanner a user should go into their file system and
find where the provided XMLs are (the xmls which are in the src folder). Then a user can navigate
to those XMLs in their file explorer and add them to the system. To see a schedule a user will need
to click on a user they want to see. Then the respective schedule should pop up. *NEW* The addUser
method in CentralSystem is how you load up the xml files as Files. The reason for files being that
the model does not need to know about how to get a file path. The model delegates this to the
XML reader.
--------------------------------------------------------------------------------------------------
Key components: Explain the highest-level components in your system, and what they do.

The central system is driven by the XML reader and taking in new schedules to the overall system.
The central system then drives the functionality until the XML writer needs to be driven by the
system.
--------------------------------------------------------------------------------------------------
Key subcomponents: Within each component, give an overview of the main nouns in your system,
and why they exist and what they are used for.

view package:
    NUPlannerView
        Considering previous assignment implementations we would want an interface to implement
        render, which abstracts how a model is viewed/displayed (text, graphics, etc.)
    NUPlannerTextView
        // PARAMETERIZED MODEL AND VIEW FOR SCHEDULE???????
        toString to be used as a textual aid for correctness with assignment 5
        viewing the schedule as a user's name then listing the day and each event a user has
        for each respective day of the week.
model package:
    eventfields package:
        Day
            An enumeration to represent days of the week, restricting the user to only valid days.
        Location
            Considers the locations children making sure there is a boolean and string location.
        Time
            Enforcing military time with hours and minutes, no seconds and not in civilian time.

    Central System
        Implements the NUPlanner system with its public methods and keeps track of all users,
        and all users schedules in the current system. Has a set of all users contained in the
        system. A list of events in the system.
        - Invariant: all events in the event list are in at least one user's schedule
    EventRep
        The interface to represent how an event could be implemented with the implemented public
        methods.
    Event
        An event in a user's schedule. Has a name of the event, time, location, and list of
        those invited and enforces the requirements listed by the assignment. Names for all
        existing events in a given user's schedule should be unique.
        - Invariant: there is always a host for an event (at least one invitee per event)
        - Invariant: when modifying an event, it cannot have the exact same info as another
        event in system
    NUPlannerSystem
        The interface to represent a systems behavior of add, modify, remove, and get all users
        schedules.
    ScheduleRep
        The interface to represent how a schedule could be implemented with the public methods
        mentioned with their respective javadocs.
    Schedule
        A schedule of a user. This contains the users name and the events in their schedule. All
        user ids should be unique (two with the same name are not allowed).
userxmls:
    A package to be used when testing the xml for a place the writer can send the XML files to.
Changes for part 2 ------------------------------------------------------------------------------
    Added in a ReadonlyPlannerModel which contains the following observations:
        What users (or user names) are in the planner?
        CentralSystem (usersInSystem()):
            This was missing so we added it into our central system by getting the keys of our
            map that stores all of our users and schedules. Avoiding reference to fields.
        Does some event conflict with the existing schedules for all of the event’s invited users?
        CentralSystem (doesOverlap(EventRep event)):
            This was missing so we added a overlaps with method in our schedule class and added a
            method called doesOverlap which takes in an event, gets all who are invited. Iterates
            through the invitees schedules and then called the new overlapsWith method on the
            given event.
        What are the events in a given user’s schedule?
            We had half of this implementation, but added this method to the ReadOnly and got the
            users schedule, and the events planned as a list of events. Which is NOT A REFERENCE TO
            the actual field in schedule, rather it is a copy of all the events.
        Remove event for a specific users:
            Altering the original implementation of removeEvent to consider if the user is the host
            of the event.
        Add event to specific users schedule:
            Adding in a new event to a specific users schedule.
        Add event to all schedules:
            When iterating through the invited users schedule, adding a try catch to add to the
            schedules where no overlap occurs.
        Modifying invitees:
            It is okay to remove invitees that don't exist; they are already "removed."
            The amount of removed invitees just cannot exceed or be the current number of
            invitees; this would mean an event could have no invitees (i.e. no host), and
            our requirement is that any event has at least one invitee. It is okay to add
            invitees that are already in the event; they are already "added."
        New constructor to keep track of a list of schedule:
            For each schedule to be added to the map.
        ACCESS MODIFIERS:
            Adding 'private' to the access modifiers in time and location.
    Added in Test Directory ->
        IN MODEL TESTING PACKAGE MORE THOUROUGH TESTING

changes for part 3 -------------------------------------------------------------------------------
view:
    The constructor now only takes in a ReadonlyNUPlannerSystem

central system:
    saveSchedule: now only takes in the file and passes it along to the writer, before it got the
                  absolute path then passed that along.
EXTRA CREDIT:
    Resizable View: Adding line 48 to setting the view to have a preferred size is the only change
                    that I made to to allow the view to be completely resizeable.
    Lenient Strategy:


--------------------------------------------------------------------------------------------------
Source organization: Either explain for each component where to find it in your codebase,
or explain for each directory in your codebase what components it provides.
Either way, supply the reader with a “map” to your codebase, so they can navigate around.

key:
** - notes
* - interface
~ - package

/src [this contains the whole program, the programs parts the divided into packages]
|+-/controller~: (** this is for future implementation nothing to see here really**)
|  |+- Controller
|+-/model~: (** interfaces, model, schedule rep., time rep., location rep., and day enum**)
|  |+-/eventfields~ (day, location, and time)
|  |   |+-Day [enum]
|  |   |+-Location [online && place]
|  |   |+-Time [start {day and time} && end {day and time}]
|  |+- CentralSystem [our representation of the central system thus far]
|  |+- Event [our representation of an event with a name, time, location, and invitees]
|  |+- EventRep [* the interface of an event for what the event can have the behavior of]
|  |+- NUPlannerSystem [* the interface of a NUPlanner system and the behaviors of a planner]
|  |+- ReadOnlyNUPlannerSystem [the model with only observable features]
|  |+- Schedule [our representation of schedule with a uid and list of events]
|  |+- ScheduleRep [*interface: represents a schedule]
|+-/userxmls~: (** this is to test for our writer**)
|+-/view~
|  |+- EventFrame [frame: the frame of an event that pops up when either create or modify pops up]
|  |+- EventPanel [panel: the panel containing event fields and remove/modify event]
|  |+- MainSystemFrame [frame: the overall main system that implements NUPlannerView]
|  |+- NUPlannerTestView [view: a general naive string based view implements NUPlannerView]
|  |+- NUPlannerView [*interface: representing the view of a NUPlanner]
|  |+- SchedulePanel [panel: the panel of the initial schedule panel]
|+-/xmlfunc~
|  |+- XMLReader [read a given xml and place it in the central system]
|  |+- XMLWriter [write a schedule to a given directory]
| (** in additional to MVC and classes the src folder also contains example XML files
      and a main class (PlannerMain) to RUN THE PROGRAM**)
/test
|  |+-/model~
|  |   |+-/eventfields~
|  |   |   |+- CentralSystemTests [test: central system]
|  |   |   |+- EventTests [test: event]
|  |   |   |+- ScheduleTests [test: schedule]
|  |+-/xmlfunc~
|  |   |+- XMLTest [test: XMLReader and XMLWriter]

(**outside of the src and testing folder there are screenshots of event panel,
                                                   schedule, and schedule events**)

